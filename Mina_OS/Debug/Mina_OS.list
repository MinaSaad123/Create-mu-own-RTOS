
Mina_OS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010cc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080011fc  080011fc  000111fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001238  08001238  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08001238  08001238  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001238  08001238  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001238  08001238  00011238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800123c  0800123c  0001123c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08001240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000001c  0800125c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000004  2000030c  0800125c  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004014  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cc1  00000000  00000000  00024059  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000011e8  00000000  00000000  00024d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002f8  00000000  00000000  00025f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000280  00000000  00000000  00026200  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000250e  00000000  00000000  00026480  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000298a  00000000  00000000  0002898e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0001122f  00000000  00000000  0002b318  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003c547  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000097c  00000000  00000000  0003c5c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000001c 	.word	0x2000001c
 800014c:	00000000 	.word	0x00000000
 8000150:	080011e4 	.word	0x080011e4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000020 	.word	0x20000020
 800016c:	080011e4 	.word	0x080011e4

08000170 <EXTI0_IRQHandler>:
//*=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=*
//             Interrupt Handler
//*=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=*

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//Clearing PR register
	EXTI->PR |= (1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000003c 	.word	0x2000003c

08000194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//Clearing PR register
	EXTI->PR |= (1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000003c 	.word	0x2000003c

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//Clearing PR register
	EXTI->PR |= (1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000003c 	.word	0x2000003c

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//Clearing PR register
	EXTI->PR |= (1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000003c 	.word	0x2000003c

08000200 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0

	//Clearing PR register
	EXTI->PR |= (1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000003c 	.word	0x2000003c

08000224 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CallBack[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CallBack[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CallBack[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CallBack[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CallBack[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000003c 	.word	0x2000003c

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CallBack[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CallBack[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CallBack[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CallBack[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CallBack[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CallBack[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000003c 	.word	0x2000003c

08000390 <SPI1_IRQHandler>:
 *                                                 ==========================
 */

//===============================<SPI1_IRQHandler Function>
void SPI1_IRQHandler ()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	struct S_SPI_IRQ SPI_IRQ;

	SPI_IRQ.RXE = ( (SPI1->SR) & 1);
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <SPI1_IRQHandler+0x40>)
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	793b      	ldrb	r3, [r7, #4]
 80003a2:	f362 0300 	bfi	r3, r2, #0, #1
 80003a6:	713b      	strb	r3, [r7, #4]
	SPI_IRQ.TXE = ( (SPI1->SR >> 1) & 1 );
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <SPI1_IRQHandler+0x40>)
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	085b      	lsrs	r3, r3, #1
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	793b      	ldrb	r3, [r7, #4]
 80003b6:	f362 0341 	bfi	r3, r2, #1, #1
 80003ba:	713b      	strb	r3, [r7, #4]

	//Todo ERR Interrupt
	G_SPI_CFG[SPI1_Index]->CallBack(SPI_IRQ);
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <SPI1_IRQHandler+0x44>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	7938      	ldrb	r0, [r7, #4]
 80003c4:	4798      	blx	r3

}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40013000 	.word	0x40013000
 80003d4:	20000078 	.word	0x20000078

080003d8 <SPI2_IRQHandler>:

//===============================<SPI2_IRQHandler Function>
void SPI2_IRQHandler ()
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
	struct S_SPI_IRQ SPI_IRQ;

	SPI_IRQ.RXE = ( (SPI2->SR) & 1);
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <SPI2_IRQHandler+0x40>)
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	b2da      	uxtb	r2, r3
 80003e8:	793b      	ldrb	r3, [r7, #4]
 80003ea:	f362 0300 	bfi	r3, r2, #0, #1
 80003ee:	713b      	strb	r3, [r7, #4]
	SPI_IRQ.TXE = ( (SPI2->SR >> 1) & 1 );
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <SPI2_IRQHandler+0x40>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	085b      	lsrs	r3, r3, #1
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	793b      	ldrb	r3, [r7, #4]
 80003fe:	f362 0341 	bfi	r3, r2, #1, #1
 8000402:	713b      	strb	r3, [r7, #4]

	//Todo ERR Interrupt
	G_SPI_CFG[SPI2_Index]->CallBack(SPI_IRQ);
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <SPI2_IRQHandler+0x44>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	7938      	ldrb	r0, [r7, #4]
 800040c:	4798      	blx	r3

}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40003800 	.word	0x40003800
 800041c:	20000078 	.word	0x20000078

08000420 <USART1_IRQHandler>:
//=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
//                               IRQ Handler
//=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#

void USART1_IRQHandler ()
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	G_UART_CFG->P_IRQ_CallBack ();
 8000424:	4b02      	ldr	r3, [pc, #8]	; (8000430 <USART1_IRQHandler+0x10>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	691b      	ldr	r3, [r3, #16]
 800042a:	4798      	blx	r3
}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000038 	.word	0x20000038

08000434 <USART2_IRQHandler>:

void USART2_IRQHandler ()
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	G_UART_CFG->P_IRQ_CallBack ();
 8000438:	4b02      	ldr	r3, [pc, #8]	; (8000444 <USART2_IRQHandler+0x10>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	691b      	ldr	r3, [r3, #16]
 800043e:	4798      	blx	r3
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000038 	.word	0x20000038

08000448 <USART3_IRQHandler>:

void USART3_IRQHandler ()
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	G_UART_CFG->P_IRQ_CallBack ();
 800044c:	4b02      	ldr	r3, [pc, #8]	; (8000458 <USART3_IRQHandler+0x10>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	691b      	ldr	r3, [r3, #16]
 8000452:	4798      	blx	r3
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000038 	.word	0x20000038

0800045c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	6039      	str	r1, [r7, #0]
 8000466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800046c:	2b00      	cmp	r3, #0
 800046e:	db0a      	blt.n	8000486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	b2da      	uxtb	r2, r3
 8000474:	490c      	ldr	r1, [pc, #48]	; (80004a8 <__NVIC_SetPriority+0x4c>)
 8000476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800047a:	0152      	lsls	r2, r2, #5
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	440b      	add	r3, r1
 8000480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000484:	e00a      	b.n	800049c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	b2da      	uxtb	r2, r3
 800048a:	4908      	ldr	r1, [pc, #32]	; (80004ac <__NVIC_SetPriority+0x50>)
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	f003 030f 	and.w	r3, r3, #15
 8000492:	3b04      	subs	r3, #4
 8000494:	0152      	lsls	r2, r2, #5
 8000496:	b2d2      	uxtb	r2, r2
 8000498:	440b      	add	r3, r1
 800049a:	761a      	strb	r2, [r3, #24]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	e000e100 	.word	0xe000e100
 80004ac:	e000ed00 	.word	0xe000ed00

080004b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004c0:	d301      	bcc.n	80004c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004c2:	2301      	movs	r3, #1
 80004c4:	e00f      	b.n	80004e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <SysTick_Config+0x40>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ce:	2107      	movs	r1, #7
 80004d0:	f04f 30ff 	mov.w	r0, #4294967295
 80004d4:	f7ff ffc2 	bl	800045c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <SysTick_Config+0x40>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <SysTick_Config+0x40>)
 80004e0:	2207      	movs	r2, #7
 80004e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	e000e010 	.word	0xe000e010

080004f4 <HardFault_Handler>:

uint8_t SysTick_LED;


void HardFault_Handler()
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	while (1);
 80004f8:	e7fe      	b.n	80004f8 <HardFault_Handler+0x4>

080004fa <MemManage_Handler>:
}

void MemManage_Handler()
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
	while (1);
 80004fe:	e7fe      	b.n	80004fe <MemManage_Handler+0x4>

08000500 <BusFault_Handler>:
}

void BusFault_Handler()
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	while (1);
 8000504:	e7fe      	b.n	8000504 <BusFault_Handler+0x4>

08000506 <PendSV_Handler>:
}

__attribute ((naked)) void PendSV_Handler () //To switch Context
{
	__asm volatile("b OS_PendSV_Services");
 8000506:	f000 b8fd 	b.w	8000704 <OS_PendSV_Services>

}
 800050a:	bf00      	nop

0800050c <UsageFault_Handler>:

void UsageFault_Handler()
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	while (1);
 8000510:	e7fe      	b.n	8000510 <UsageFault_Handler+0x4>

08000512 <SVC_Handler>:
}

__attribute ((naked)) void SVC_Handler()
{
	__asm ("TST LR, #0x04 \n\t"
 8000512:	f01e 0f04 	tst.w	lr, #4
 8000516:	bf0c      	ite	eq
 8000518:	f3ef 8008 	mrseq	r0, MSP
 800051c:	f3ef 8009 	mrsne	r0, PSP
 8000520:	f000 baea 	b.w	8000af8 <OS_SVC_Services>
			"ITE EQ \n\t"
			"MRSEQ R0, MSP \n\t"
			"MRSNE R0, PSP \n\t"
			"B OS_SVC_Services");
}
 8000524:	bf00      	nop
	...

08000528 <Trigger_PendSV>:
 *                                                 ============================
 */


void Trigger_PendSV ()
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <Trigger_PendSV+0x18>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	4a03      	ldr	r2, [pc, #12]	; (8000540 <Trigger_PendSV+0x18>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000536:	6053      	str	r3, [r2, #4]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <HW_Init>:

void HW_Init ()
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	  // 1Count --> 0.125us
	  // X count --> 1ms
	  // x = 800 count

	//Adjust PendSV interrupt priority
	__NVIC_SetPriority(PendSV_IRQn, 15);  /* SystICK priority = 15 */
 8000548:	210f      	movs	r1, #15
 800054a:	f06f 0001 	mvn.w	r0, #1
 800054e:	f7ff ff85 	bl	800045c <__NVIC_SetPriority>

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}

08000556 <Start_Ticker>:

void Start_Ticker ()
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0
	  // 8MHZ
	  // 1Count --> 0.125us
	  // X count --> 1ms
	  // x = 800 count

	SysTick_Config(8000);
 800055a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800055e:	f7ff ffa7 	bl	80004b0 <SysTick_Config>


}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <SysTick_Handler>:

void SysTick_Handler ()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	SysTick_LED ^= 1;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <SysTick_Handler+0x2c>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f083 0301 	eor.w	r3, r3, #1
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <SysTick_Handler+0x2c>)
 8000578:	701a      	strb	r2, [r3, #0]

	Count++;
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <SysTick_Handler+0x30>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	4a05      	ldr	r2, [pc, #20]	; (8000598 <SysTick_Handler+0x30>)
 8000582:	6013      	str	r3, [r2, #0]

	Update_TaskWaitingTime(); /* Update TaskTime */
 8000584:	f000 fb4e 	bl	8000c24 <Update_TaskWaitingTime>

	Decide_WhatNext();  /* Decide what is next */
 8000588:	f000 f9ec 	bl	8000964 <Decide_WhatNext>

	Trigger_PendSV();  /* Go to PendSV Handler to switch context\storing */
 800058c:	f7ff ffcc 	bl	8000528 <Trigger_PendSV>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000018 	.word	0x20000018
 8000598:	2000024c 	.word	0x2000024c

0800059c <FIFO_buf_init>:
 *                                                |-------------------------|
 */

//==========================================================================<FIFO_buf_init Function>
FIFO_buf_status FIFO_buf_init(FIFO_buf_t* FIFO_buf, element_type* buf, uint32_t Length)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
	//checking if buffer is exist
	if (buf == NULL)     // if (!buf) --> Better in optimiztion
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <FIFO_buf_init+0x16>
	{
		return FIFO_Null;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e011      	b.n	80005d6 <FIFO_buf_init+0x3a>
	}

	//Passing details for buffer
	FIFO_buf->base = buf;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	68ba      	ldr	r2, [r7, #8]
 80005b6:	609a      	str	r2, [r3, #8]
	FIFO_buf->head = FIFO_buf->base;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	689a      	ldr	r2, [r3, #8]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	60da      	str	r2, [r3, #12]
	FIFO_buf->tail = FIFO_buf->base;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	689a      	ldr	r2, [r3, #8]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	611a      	str	r2, [r3, #16]
	FIFO_buf->count = 0;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
	FIFO_buf->length = Length;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	601a      	str	r2, [r3, #0]

	return FIFO_No_Error;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <FIFO_buf_enqueue>:

//==========================================================================<FIFO_buf_enqueue Function>
FIFO_buf_status FIFO_buf_enqueue(FIFO_buf_t *FIFO_buf, element_type item)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
	if (FIFO_buf->base == NULL || FIFO_buf->head == NULL)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d003      	beq.n	80005fa <FIFO_buf_enqueue+0x1a>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d101      	bne.n	80005fe <FIFO_buf_enqueue+0x1e>
	{
		return FIFO_Null;
 80005fa:	2301      	movs	r3, #1
 80005fc:	e02c      	b.n	8000658 <FIFO_buf_enqueue+0x78>

	} else if ((FIFO_buf->count == FIFO_buf->length))
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	429a      	cmp	r2, r3
 8000608:	d101      	bne.n	800060e <FIFO_buf_enqueue+0x2e>
	{
		return FIFO_Full;
 800060a:	2303      	movs	r3, #3
 800060c:	e024      	b.n	8000658 <FIFO_buf_enqueue+0x78>

	} else if (FIFO_buf->head == (FIFO_buf->base + (FIFO_buf->length - 1) )) //Circular Queue
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	68da      	ldr	r2, [r3, #12]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6899      	ldr	r1, [r3, #8]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800061e:	3b01      	subs	r3, #1
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	440b      	add	r3, r1
 8000624:	429a      	cmp	r2, r3
 8000626:	d108      	bne.n	800063a <FIFO_buf_enqueue+0x5a>
	{
		*(FIFO_buf->head) = item;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	601a      	str	r2, [r3, #0]
		FIFO_buf->head = FIFO_buf->base;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	689a      	ldr	r2, [r3, #8]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	e008      	b.n	800064c <FIFO_buf_enqueue+0x6c>

	} else
	{
		*(FIFO_buf->head) = item;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	601a      	str	r2, [r3, #0]
		FIFO_buf->head++;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	1d1a      	adds	r2, r3, #4
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	60da      	str	r2, [r3, #12]

	}

	FIFO_buf->count++;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	1c5a      	adds	r2, r3, #1
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	605a      	str	r2, [r3, #4]

	return FIFO_No_Error;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <FIFO_buf_dequeue>:

//==========================================================================<FIFO_buf_dequeue Function>
FIFO_buf_status FIFO_buf_dequeue(FIFO_buf_t *FIFO_buf, element_type* item)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	6039      	str	r1, [r7, #0]

	if (FIFO_buf->tail == ( FIFO_buf->base + ( FIFO_buf->length - 1) ) )
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	691a      	ldr	r2, [r3, #16]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6899      	ldr	r1, [r3, #8]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800067c:	3b01      	subs	r3, #1
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	440b      	add	r3, r1
 8000682:	429a      	cmp	r2, r3
 8000684:	d10e      	bne.n	80006a4 <FIFO_buf_dequeue+0x42>
	{
		*item = *(FIFO_buf->tail);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	691b      	ldr	r3, [r3, #16]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	601a      	str	r2, [r3, #0]
		FIFO_buf->tail = FIFO_buf->base;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689a      	ldr	r2, [r3, #8]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	611a      	str	r2, [r3, #16]
		FIFO_buf->count--;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	1e5a      	subs	r2, r3, #1
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	e014      	b.n	80006ce <FIFO_buf_dequeue+0x6c>


	} else if (FIFO_buf->count == 0)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <FIFO_buf_dequeue+0x4e>
	{
		return FIFO_Empty;
 80006ac:	2302      	movs	r3, #2
 80006ae:	e00f      	b.n	80006d0 <FIFO_buf_dequeue+0x6e>

	} else
	{
		*item = *(FIFO_buf->tail);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	691b      	ldr	r3, [r3, #16]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	601a      	str	r2, [r3, #0]
		FIFO_buf->tail++;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	691b      	ldr	r3, [r3, #16]
 80006be:	1d1a      	adds	r2, r3, #4
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	611a      	str	r2, [r3, #16]
		FIFO_buf->count--;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	1e5a      	subs	r2, r3, #1
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	605a      	str	r2, [r3, #4]
	}

	return FIFO_No_Error;
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <FIFO_Clean_Queue>:
	return FIFO_No_Error;
}

//==========================================================================<FIFO_buf_is_full Function>
FIFO_buf_status FIFO_Clean_Queue (FIFO_buf_t* FIFO_buf )
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	FIFO_buf->head = FIFO_buf->base; //Return base to his start point ||OR FIFO_buf->head -= (FIFO_buf->count + 1)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60da      	str	r2, [r3, #12]

	FIFO_buf->count = 0;  	/* Counts equal Zero */
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
	FIFO_buf->tail = FIFO_buf->base;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	689a      	ldr	r2, [r3, #8]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	611a      	str	r2, [r3, #16]

   return FIFO_No_Error;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <OS_PendSV_Services>:
__attribute ((naked)) void OS_PendSV_Services () //To switch Context/Store
{
	//=============================================================================
	//Save the Context of the Current Task
	//=============================================================================
	OS_Get_PSP(OS_Control.CurrentTask->Current_PSP);   /* Get the Current PSP for the current tast */
 8000704:	4b6f      	ldr	r3, [pc, #444]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800070a:	f3ef 8009 	mrs	r0, PSP
 800070e:	4602      	mov	r2, r0
 8000710:	619a      	str	r2, [r3, #24]

	//Use this Current_PSP to store (r4 to r11)
	OS_Control.CurrentTask->Current_PSP--;
 8000712:	4b6c      	ldr	r3, [pc, #432]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000718:	699a      	ldr	r2, [r3, #24]
 800071a:	3a04      	subs	r2, #4
 800071c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0, r4" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800071e:	4b69      	ldr	r3, [pc, #420]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	4622      	mov	r2, r4
 8000728:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800072a:	4b66      	ldr	r3, [pc, #408]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 800072c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000730:	699a      	ldr	r2, [r3, #24]
 8000732:	3a04      	subs	r2, #4
 8000734:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0, r5" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000736:	4b63      	ldr	r3, [pc, #396]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	462a      	mov	r2, r5
 8000740:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000742:	4b60      	ldr	r3, [pc, #384]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000748:	699a      	ldr	r2, [r3, #24]
 800074a:	3a04      	subs	r2, #4
 800074c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0, r6" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800074e:	4b5d      	ldr	r3, [pc, #372]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	4632      	mov	r2, r6
 8000758:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800075a:	4b5a      	ldr	r3, [pc, #360]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 800075c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000760:	699a      	ldr	r2, [r3, #24]
 8000762:	3a04      	subs	r2, #4
 8000764:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0, r7" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000766:	4b57      	ldr	r3, [pc, #348]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	463a      	mov	r2, r7
 8000770:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000772:	4b54      	ldr	r3, [pc, #336]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000778:	699a      	ldr	r2, [r3, #24]
 800077a:	3a04      	subs	r2, #4
 800077c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0, r8" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800077e:	4b51      	ldr	r3, [pc, #324]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4642      	mov	r2, r8
 8000788:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800078a:	4b4e      	ldr	r3, [pc, #312]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 800078c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000790:	699a      	ldr	r2, [r3, #24]
 8000792:	3a04      	subs	r2, #4
 8000794:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0, r9" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000796:	4b4b      	ldr	r3, [pc, #300]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	464a      	mov	r2, r9
 80007a0:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 80007a2:	4b48      	ldr	r3, [pc, #288]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 80007a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a8:	699a      	ldr	r2, [r3, #24]
 80007aa:	3a04      	subs	r2, #4
 80007ac:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0, r10" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80007ae:	4b45      	ldr	r3, [pc, #276]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 80007b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	4652      	mov	r2, sl
 80007b8:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 80007ba:	4b42      	ldr	r3, [pc, #264]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 80007bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007c0:	699a      	ldr	r2, [r3, #24]
 80007c2:	3a04      	subs	r2, #4
 80007c4:	619a      	str	r2, [r3, #24]
		__asm volatile("mov %0, r11" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80007c6:	4b3f      	ldr	r3, [pc, #252]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 80007c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	465a      	mov	r2, fp
 80007d0:	601a      	str	r2, [r3, #0]

	//=============================================================================
	//Restore the Context of the Current Task
	//=============================================================================
	//Switch to next task
	if (OS_Control.NextTask != NULL)
 80007d2:	4b3c      	ldr	r3, [pc, #240]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 80007d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d009      	beq.n	80007f0 <OS_PendSV_Services+0xec>
	{
		OS_Control.CurrentTask = OS_Control.NextTask;
 80007dc:	4b39      	ldr	r3, [pc, #228]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 80007de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007e2:	4a38      	ldr	r2, [pc, #224]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		OS_Control.NextTask = NULL;
 80007e8:	4b36      	ldr	r3, [pc, #216]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	}

	//Use this Current_PSP to restore (r4 to r11)
	__asm volatile("mov r11, %0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80007f0:	4b34      	ldr	r3, [pc, #208]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 80007f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++;
 80007fc:	4b31      	ldr	r3, [pc, #196]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 80007fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000802:	699a      	ldr	r2, [r3, #24]
 8000804:	3204      	adds	r2, #4
 8000806:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10, %0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000808:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 800080a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000814:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081a:	699a      	ldr	r2, [r3, #24]
 800081c:	3204      	adds	r2, #4
 800081e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9, %0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000820:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++;
 800082c:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 800082e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000832:	699a      	ldr	r2, [r3, #24]
 8000834:	3204      	adds	r2, #4
 8000836:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8, %0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084a:	699a      	ldr	r2, [r3, #24]
 800084c:	3204      	adds	r2, #4
 800084e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7, %0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++;
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000862:	699a      	ldr	r2, [r3, #24]
 8000864:	3204      	adds	r2, #4
 8000866:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6, %0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087a:	699a      	ldr	r2, [r3, #24]
 800087c:	3204      	adds	r2, #4
 800087e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5, %0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++;
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000892:	699a      	ldr	r2, [r3, #24]
 8000894:	3204      	adds	r2, #4
 8000896:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r4, %0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 800089a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 80008a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008aa:	699a      	ldr	r2, [r3, #24]
 80008ac:	3204      	adds	r2, #4
 80008ae:	619a      	str	r2, [r3, #24]

	OS_Set_PSP(OS_Control.CurrentTask->Current_PSP); /* Get the Current PSP for the next tast */
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <OS_PendSV_Services+0x1c0>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f380 8809 	msr	PSP, r0
	__asm volatile("bx LR"); //Retrun to task in ROM
 80008be:	4770      	bx	lr

}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	200000c4 	.word	0x200000c4

080008c8 <BubbleSort>:
//                             *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
//-----------------------------*                  Services Function                    *---------------------------------//
//                             *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*

void BubbleSort ()
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
	int i = 0, j = 0, n = OS_Control.NoOFActiveTasks;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b22      	ldr	r3, [pc, #136]	; (8000960 <BubbleSort+0x98>)
 80008d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80008dc:	607b      	str	r3, [r7, #4]
    Task_REF* Temp = NULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]

    for (i = 0; i < n - 1; i++) //Number of Elements - 1"Last element will not be compared"
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	e030      	b.n	800094a <BubbleSort+0x82>
    {
    	for (j = 0; j < n - i - 1; j++) //Number of compares
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	e023      	b.n	8000936 <BubbleSort+0x6e>
    	{
    		if (OS_Control.OS_Tasks[j]->Priority >  OS_Control.OS_Tasks[j + 1]->Priority)
 80008ee:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <BubbleSort+0x98>)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f6:	791a      	ldrb	r2, [r3, #4]
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	3301      	adds	r3, #1
 80008fc:	4918      	ldr	r1, [pc, #96]	; (8000960 <BubbleSort+0x98>)
 80008fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000902:	791b      	ldrb	r3, [r3, #4]
 8000904:	429a      	cmp	r2, r3
 8000906:	d913      	bls.n	8000930 <BubbleSort+0x68>
    		{
    			//Swipping with Temp Variable
    			Temp = OS_Control.OS_Tasks[j];
 8000908:	4a15      	ldr	r2, [pc, #84]	; (8000960 <BubbleSort+0x98>)
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000910:	603b      	str	r3, [r7, #0]
    			OS_Control.OS_Tasks[j] = OS_Control.OS_Tasks[j + 1];
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	3301      	adds	r3, #1
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <BubbleSort+0x98>)
 8000918:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800091c:	4910      	ldr	r1, [pc, #64]	; (8000960 <BubbleSort+0x98>)
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    			OS_Control.OS_Tasks[j + 1] = Temp;
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	3301      	adds	r3, #1
 8000928:	490d      	ldr	r1, [pc, #52]	; (8000960 <BubbleSort+0x98>)
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	for (j = 0; j < n - i - 1; j++) //Number of compares
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	3301      	adds	r3, #1
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	3b01      	subs	r3, #1
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	429a      	cmp	r2, r3
 8000942:	dbd4      	blt.n	80008ee <BubbleSort+0x26>
    for (i = 0; i < n - 1; i++) //Number of Elements - 1"Last element will not be compared"
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3301      	adds	r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3b01      	subs	r3, #1
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	dbc9      	blt.n	80008e8 <BubbleSort+0x20>

    	}

	}

}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	200000c4 	.word	0x200000c4

08000964 <Decide_WhatNext>:

void Decide_WhatNext ()
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	//If ready queue is empty && OS_Control->CurrentTask != Suspend
	if (Ready_QUEUE.count == 0 && OS_Control.CurrentTask->TaskState != Suspend)
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <Decide_WhatNext+0x98>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d11a      	bne.n	80009a6 <Decide_WhatNext+0x42>
 8000970:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <Decide_WhatNext+0x9c>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000976:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800097a:	2b00      	cmp	r3, #0
 800097c:	d013      	beq.n	80009a6 <Decide_WhatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState = Running;
 800097e:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <Decide_WhatNext+0x9c>)
 8000980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000984:	2201      	movs	r2, #1
 8000986:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

		//Add the current task to Queue
		FIFO_buf_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <Decide_WhatNext+0x9c>)
 800098c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000990:	4619      	mov	r1, r3
 8000992:	481a      	ldr	r0, [pc, #104]	; (80009fc <Decide_WhatNext+0x98>)
 8000994:	f7ff fe24 	bl	80005e0 <FIFO_buf_enqueue>

		OS_Control.NextTask = OS_Control.CurrentTask;
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <Decide_WhatNext+0x9c>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a18      	ldr	r2, [pc, #96]	; (8000a00 <Decide_WhatNext+0x9c>)
 80009a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
			FIFO_buf_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = Ready;
		}

	}
}
 80009a4:	e027      	b.n	80009f6 <Decide_WhatNext+0x92>
		FIFO_buf_dequeue(&Ready_QUEUE, &OS_Control.NextTask);
 80009a6:	4917      	ldr	r1, [pc, #92]	; (8000a04 <Decide_WhatNext+0xa0>)
 80009a8:	4814      	ldr	r0, [pc, #80]	; (80009fc <Decide_WhatNext+0x98>)
 80009aa:	f7ff fe5a 	bl	8000662 <FIFO_buf_dequeue>
		OS_Control.NextTask->TaskState = Running;
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <Decide_WhatNext+0x9c>)
 80009b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b4:	2201      	movs	r2, #1
 80009b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if (OS_Control.CurrentTask->Priority == OS_Control.NextTask->Priority && OS_Control.CurrentTask->TaskState != Suspend)
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <Decide_WhatNext+0x9c>)
 80009bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c0:	791a      	ldrb	r2, [r3, #4]
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <Decide_WhatNext+0x9c>)
 80009c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009c8:	791b      	ldrb	r3, [r3, #4]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d113      	bne.n	80009f6 <Decide_WhatNext+0x92>
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <Decide_WhatNext+0x9c>)
 80009d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00c      	beq.n	80009f6 <Decide_WhatNext+0x92>
			FIFO_buf_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <Decide_WhatNext+0x9c>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <Decide_WhatNext+0x98>)
 80009e6:	f7ff fdfb 	bl	80005e0 <FIFO_buf_enqueue>
			OS_Control.CurrentTask->TaskState = Ready;
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <Decide_WhatNext+0x9c>)
 80009ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f0:	2203      	movs	r2, #3
 80009f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000158 	.word	0x20000158
 8000a00:	200000c4 	.word	0x200000c4
 8000a04:	20000150 	.word	0x20000150

08000a08 <MyRTOS_Update_SchedulerTable>:


void MyRTOS_Update_SchedulerTable () //Handler Mode
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
	int i = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
	Task_REF* PTask = NULL , *PNextTask = NULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]

	//1- Bubble Sort scheduler TAble OS_Contro--> OSTasks[100] priority high than low
	BubbleSort();
 8000a1a:	f7ff ff55 	bl	80008c8 <BubbleSort>
    //=============================================================================================================

	//2- Clean Ready Queue
	while (FIFO_Clean_Queue(&Ready_QUEUE));
 8000a1e:	bf00      	nop
 8000a20:	4827      	ldr	r0, [pc, #156]	; (8000ac0 <MyRTOS_Update_SchedulerTable+0xb8>)
 8000a22:	f7ff fe5a 	bl	80006da <FIFO_Clean_Queue>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1f9      	bne.n	8000a20 <MyRTOS_Update_SchedulerTable+0x18>
    //=============================================================================================================
	//3- Update Ready Queue
	while (i < (OS_Control.NoOFActiveTasks))
 8000a2c:	e03d      	b.n	8000aaa <MyRTOS_Update_SchedulerTable+0xa2>
    {
    	PTask = OS_Control.OS_Tasks[i];
 8000a2e:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <MyRTOS_Update_SchedulerTable+0xbc>)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a36:	60bb      	str	r3, [r7, #8]
    	PNextTask = OS_Control.OS_Tasks[i + 1];
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a21      	ldr	r2, [pc, #132]	; (8000ac4 <MyRTOS_Update_SchedulerTable+0xbc>)
 8000a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a42:	607b      	str	r3, [r7, #4]

    	if (PTask->TaskState != Suspend)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d02a      	beq.n	8000aa4 <MyRTOS_Update_SchedulerTable+0x9c>
    	{   //Not to test the PNextTask is the end always Because: In Task_REF* OS_Tasks[30] there are mix of suspend and waiting Tasks

    		if (PNextTask->TaskState == Suspend)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d108      	bne.n	8000a6a <MyRTOS_Update_SchedulerTable+0x62>
    		{   //ASSUMPTION: in case the second Task is suspend the third element is not the Same priority as the First task

    			FIFO_buf_enqueue(&Ready_QUEUE, PTask); /* Put the task in Queue */
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	4819      	ldr	r0, [pc, #100]	; (8000ac0 <MyRTOS_Update_SchedulerTable+0xb8>)
 8000a5c:	f7ff fdc0 	bl	80005e0 <FIFO_buf_enqueue>
    			PTask->TaskState = Ready;
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	2203      	movs	r2, #3
 8000a64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    			break;
 8000a68:	e025      	b.n	8000ab6 <MyRTOS_Update_SchedulerTable+0xae>

    		} else if (PTask->Priority < PNextTask->Priority )
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	791a      	ldrb	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	791b      	ldrb	r3, [r3, #4]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d208      	bcs.n	8000a88 <MyRTOS_Update_SchedulerTable+0x80>
    		{
    			FIFO_buf_enqueue(&Ready_QUEUE, PTask); /* Put the task in Queue */
 8000a76:	68b9      	ldr	r1, [r7, #8]
 8000a78:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <MyRTOS_Update_SchedulerTable+0xb8>)
 8000a7a:	f7ff fdb1 	bl	80005e0 <FIFO_buf_enqueue>
    			PTask->TaskState = Ready;
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	2203      	movs	r2, #3
 8000a82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    			break;
 8000a86:	e016      	b.n	8000ab6 <MyRTOS_Update_SchedulerTable+0xae>

    		} else if (PNextTask->Priority == PTask->Priority)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	791a      	ldrb	r2, [r3, #4]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d107      	bne.n	8000aa4 <MyRTOS_Update_SchedulerTable+0x9c>
    		{
    			FIFO_buf_enqueue(&Ready_QUEUE, PTask); /* Put the task in Queue */
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <MyRTOS_Update_SchedulerTable+0xb8>)
 8000a98:	f7ff fda2 	bl	80005e0 <FIFO_buf_enqueue>
    			PTask->TaskState = Ready;
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    		}
    	}
    	i++;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
	while (i < (OS_Control.NoOFActiveTasks))
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MyRTOS_Update_SchedulerTable+0xbc>)
 8000aac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d8bb      	bhi.n	8000a2e <MyRTOS_Update_SchedulerTable+0x26>
    }
    //=============================================================================================================
    //=============================================================================================================

}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000158 	.word	0x20000158
 8000ac4:	200000c4 	.word	0x200000c4

08000ac8 <OS_SVC_Set>:

void OS_SVC_Set (SVC_ID ID) //========================To Set specific services
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
	switch (ID)
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d006      	beq.n	8000ae6 <OS_SVC_Set+0x1e>
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d006      	beq.n	8000aea <OS_SVC_Set+0x22>
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d000      	beq.n	8000ae2 <OS_SVC_Set+0x1a>

	case SVC_WaitingTask: //terminate task
		OS_Generate_Exception_To_Waiting();
		break;
	}
}
 8000ae0:	e005      	b.n	8000aee <OS_SVC_Set+0x26>
		OS_Generate_Exception_To_Activate();
 8000ae2:	df00      	svc	0
		break;
 8000ae4:	e003      	b.n	8000aee <OS_SVC_Set+0x26>
		OS_Generate_Exception_To_Terminate();
 8000ae6:	df01      	svc	1
		break;
 8000ae8:	e001      	b.n	8000aee <OS_SVC_Set+0x26>
		OS_Generate_Exception_To_Waiting();
 8000aea:	df02      	svc	2
		break;
 8000aec:	bf00      	nop
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <OS_SVC_Services>:

//                                                   |Handler Mode|
//-------------------------|==================To execute specfic services===============|----------------------------//
void OS_SVC_Services (int *Frame_Pointer)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	//in stack XPSR, PC, LR, r12, r3, r2, r1, r0 -->We want to get Passed argument in SVC instruction
	SVC_ID ID =  (SVC_ID)( *( ( (unsigned char*)(Frame_Pointer[6]) ) - 2 ) );
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3318      	adds	r3, #24
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	3b02      	subs	r3, #2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	73fb      	strb	r3, [r7, #15]

	switch (ID)
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db1a      	blt.n	8000b48 <OS_SVC_Services+0x50>
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	dd02      	ble.n	8000b1c <OS_SVC_Services+0x24>
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d012      	beq.n	8000b40 <OS_SVC_Services+0x48>

	case SVC_WaitingTask:
		MyRTOS_Update_SchedulerTable(); //--------->/* Update Scheduler Table */
		break;
	}
}
 8000b1a:	e015      	b.n	8000b48 <OS_SVC_Services+0x50>
		MyRTOS_Update_SchedulerTable(); //--------->/* Update Scheduler Table */
 8000b1c:	f7ff ff74 	bl	8000a08 <MyRTOS_Update_SchedulerTable>
		if (OS_Control.OSmodeID == OSrunning)
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <OS_SVC_Services+0x58>)
 8000b22:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d10d      	bne.n	8000b46 <OS_SVC_Services+0x4e>
			if (OS_Control.CurrentTask != &MyRTOS_IdleTask)
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <OS_SVC_Services+0x58>)
 8000b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b30:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <OS_SVC_Services+0x5c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d007      	beq.n	8000b46 <OS_SVC_Services+0x4e>
				Decide_WhatNext();
 8000b36:	f7ff ff15 	bl	8000964 <Decide_WhatNext>
				Trigger_PendSV();
 8000b3a:	f7ff fcf5 	bl	8000528 <Trigger_PendSV>
		break;
 8000b3e:	e002      	b.n	8000b46 <OS_SVC_Services+0x4e>
		MyRTOS_Update_SchedulerTable(); //--------->/* Update Scheduler Table */
 8000b40:	f7ff ff62 	bl	8000a08 <MyRTOS_Update_SchedulerTable>
		break;
 8000b44:	e000      	b.n	8000b48 <OS_SVC_Services+0x50>
		break;
 8000b46:	bf00      	nop
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200000c4 	.word	0x200000c4
 8000b54:	20000080 	.word	0x20000080

08000b58 <MyRTOS_Create_MainStack>:

void MyRTOS_Create_MainStack ()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	//Create main stack
	OS_Control._S_MSP_Task = &_estack; /*_S_MSP_Task = Stack_Top*/
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MyRTOS_Create_MainStack+0x2c>)
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <MyRTOS_Create_MainStack+0x30>)
 8000b60:	679a      	str	r2, [r3, #120]	; 0x78

	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - (MainStack / 4); /* _E_MSP_Task is uint32_t Pointer */
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MyRTOS_Create_MainStack+0x2c>)
 8000b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000b66:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8000b6a:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <MyRTOS_Create_MainStack+0x2c>)
 8000b6c:	67d3      	str	r3, [r2, #124]	; 0x7c
    //=============================================================================================================

	//Aligned 8 Byte to Task_Locator
	OS_Control.Task_Locator = ( OS_Control._E_MSP_Task - 2 );
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <MyRTOS_Create_MainStack+0x2c>)
 8000b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000b72:	3b08      	subs	r3, #8
 8000b74:	4a03      	ldr	r2, [pc, #12]	; (8000b84 <MyRTOS_Create_MainStack+0x2c>)
 8000b76:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200000c4 	.word	0x200000c4
 8000b88:	20002800 	.word	0x20002800

08000b8c <MyRTOS_CreateTaskStack>:

void MyRTOS_CreateTaskStack (Task_REF* Tref)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
	 * r2
	 * r1
	 * r0
	 * r4, r5, r6, r7, r8, r9, r10, r11
	 */
	Tref->Current_PSP = Tref->_S_PSP_Task;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	691a      	ldr	r2, [r3, #16]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP--;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	1f1a      	subs	r2, r3, #4
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000;  //DUMMY_XPSR should T= 1 to avoid Bus fault
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bb2:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	1f1a      	subs	r2, r3, #4
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (uint32_t)Tref->P_TaskEntry; //PC
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	1f1a      	subs	r2, r3, #4
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (uint32_t)0xFFFFFFFD; //LR = 0xFFFFFFFD
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f06f 0202 	mvn.w	r2, #2
 8000bda:	601a      	str	r2, [r3, #0]

    for (i = 0; i < 13; i++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	e00b      	b.n	8000bfa <MyRTOS_CreateTaskStack+0x6e>
    {
    	Tref->Current_PSP--;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	1f1a      	subs	r2, r3, #4
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	619a      	str	r2, [r3, #24]
    	*(Tref->Current_PSP) = 0;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 13; i++)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2b0c      	cmp	r3, #12
 8000bfe:	ddf0      	ble.n	8000be2 <MyRTOS_CreateTaskStack+0x56>
    }
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
	...

08000c0c <MyRTOS_IdleTask_IMPLT>:

void MyRTOS_IdleTask_IMPLT ()
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
	while (1)
	{
		IdleTask_LED ^= 1;   /* ASSUMPTION: The IdleTask is not the only task which is running first  */
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <MyRTOS_IdleTask_IMPLT+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f083 0301 	eor.w	r3, r3, #1
 8000c18:	4a01      	ldr	r2, [pc, #4]	; (8000c20 <MyRTOS_IdleTask_IMPLT+0x14>)
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	e7f8      	b.n	8000c10 <MyRTOS_IdleTask_IMPLT+0x4>
 8000c1e:	bf00      	nop
 8000c20:	20000000 	.word	0x20000000

08000c24 <Update_TaskWaitingTime>:

}


void Update_TaskWaitingTime ()
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
	int i =0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]

	for (i = 0; i < OS_Control.NoOFActiveTasks; i++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	e031      	b.n	8000c98 <Update_TaskWaitingTime+0x74>
	{
		if (OS_Control.OS_Tasks[i]->TaskState == Suspend)
 8000c34:	4a1d      	ldr	r2, [pc, #116]	; (8000cac <Update_TaskWaitingTime+0x88>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d126      	bne.n	8000c92 <Update_TaskWaitingTime+0x6e>
		{
			if (OS_Control.OS_Tasks[i]->TimeWaiting.Blocking == BlockingEnable) //It is blocking until meet the time line
 8000c44:	4a19      	ldr	r2, [pc, #100]	; (8000cac <Update_TaskWaitingTime+0x88>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d11e      	bne.n	8000c92 <Update_TaskWaitingTime+0x6e>
			{
				if (OS_Control.OS_Tasks[i]->TimeWaiting.Ticks_Count == 0)
 8000c54:	4a15      	ldr	r2, [pc, #84]	; (8000cac <Update_TaskWaitingTime+0x88>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d110      	bne.n	8000c84 <Update_TaskWaitingTime+0x60>
				{
					OS_Control.OS_Tasks[i]->TimeWaiting.Blocking = BlockingDisable;
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <Update_TaskWaitingTime+0x88>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
					OS_Control.OS_Tasks[i]->TaskState = Waiting;
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <Update_TaskWaitingTime+0x88>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c78:	2202      	movs	r2, #2
 8000c7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					OS_SVC_Set(SVC_WaitingTask);
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f7ff ff22 	bl	8000ac8 <OS_SVC_Set>
				}
				OS_Control.OS_Tasks[i]->TimeWaiting.Ticks_Count--;
 8000c84:	4a09      	ldr	r2, [pc, #36]	; (8000cac <Update_TaskWaitingTime+0x88>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c8e:	3a01      	subs	r2, #1
 8000c90:	63da      	str	r2, [r3, #60]	; 0x3c
	for (i = 0; i < OS_Control.NoOFActiveTasks; i++)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <Update_TaskWaitingTime+0x88>)
 8000c9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8c7      	bhi.n	8000c34 <Update_TaskWaitingTime+0x10>
			}
		}
	}
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200000c4 	.word	0x200000c4

08000cb0 <MY_RTOS_Init>:
 *                                            |-------------------------|
 */


MY_RTOS_ErrorID MY_RTOS_Init ()
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
	MY_RTOS_ErrorID Error = NoError;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (Srunning)
    OS_Control.OSmodeID = OSsuspend;
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <MY_RTOS_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

   // OS_Control.NoOFActiveTasks = 0;     |------>No Need to this part because struct is global and all elements is = 0

	//Specify the Main stack for OS
    MyRTOS_Create_MainStack ();
 8000cc2:	f7ff ff49 	bl	8000b58 <MyRTOS_Create_MainStack>

	//Create OS Ready Queue
    if (FIFO_buf_init(&Ready_QUEUE, Tasks_Buffer /* Array name --> Address for First element */, 10) != FIFO_No_Error)
 8000cc6:	220a      	movs	r2, #10
 8000cc8:	4910      	ldr	r1, [pc, #64]	; (8000d0c <MY_RTOS_Init+0x5c>)
 8000cca:	4811      	ldr	r0, [pc, #68]	; (8000d10 <MY_RTOS_Init+0x60>)
 8000ccc:	f7ff fc66 	bl	800059c <FIFO_buf_init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MY_RTOS_Init+0x2a>
    {
    	Error = ReadyQueue_Init_Error;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	71fb      	strb	r3, [r7, #7]
    }

	//Configure IDLE task
    strcpy(MyRTOS_IdleTask.TaskName, "IdleTask");
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MY_RTOS_Init+0x64>)
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <MY_RTOS_Init+0x68>)
 8000cde:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ce0:	c303      	stmia	r3!, {r0, r1}
 8000ce2:	701a      	strb	r2, [r3, #0]

    MyRTOS_IdleTask.Priority = 255;
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <MY_RTOS_Init+0x6c>)
 8000ce6:	22ff      	movs	r2, #255	; 0xff
 8000ce8:	711a      	strb	r2, [r3, #4]
    MyRTOS_IdleTask.P_TaskEntry = MyRTOS_IdleTask_IMPLT;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MY_RTOS_Init+0x6c>)
 8000cec:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <MY_RTOS_Init+0x70>)
 8000cee:	609a      	str	r2, [r3, #8]
    MyRTOS_IdleTask.Stack_Size = 300;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <MY_RTOS_Init+0x6c>)
 8000cf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cf6:	601a      	str	r2, [r3, #0]

    //Create Task
    MyRTOS_CreateTask(&MyRTOS_IdleTask);
 8000cf8:	4808      	ldr	r0, [pc, #32]	; (8000d1c <MY_RTOS_Init+0x6c>)
 8000cfa:	f000 f847 	bl	8000d8c <MyRTOS_CreateTask>

    return Error;
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200000c4 	.word	0x200000c4
 8000d0c:	2000016c 	.word	0x2000016c
 8000d10:	20000158 	.word	0x20000158
 8000d14:	2000009c 	.word	0x2000009c
 8000d18:	080011fc 	.word	0x080011fc
 8000d1c:	20000080 	.word	0x20000080
 8000d20:	08000c0d 	.word	0x08000c0d

08000d24 <MyRTOS_StartOS>:

void MyRTOS_StartOS ()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	OS_Control.OSmodeID = OSrunning;  /* Change OS state */
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MyRTOS_StartOS+0x60>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

	OS_Control.CurrentTask = &MyRTOS_IdleTask;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MyRTOS_StartOS+0x60>)
 8000d32:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <MyRTOS_StartOS+0x64>)
 8000d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	OS_Control.NextTask = &MyRTOS_IdleTask;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MyRTOS_StartOS+0x60>)
 8000d3a:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <MyRTOS_StartOS+0x64>)
 8000d3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	MyRTOS_ActivateTask(&MyRTOS_IdleTask);  /* Activate task */
 8000d40:	4811      	ldr	r0, [pc, #68]	; (8000d88 <MyRTOS_StartOS+0x64>)
 8000d42:	f000 f87a 	bl	8000e3a <MyRTOS_ActivateTask>

	Start_Ticker();  /* Start ticker */
 8000d46:	f7ff fc06 	bl	8000556 <Start_Ticker>

	OS_Set_PSP(OS_Control.CurrentTask->Current_PSP);
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MyRTOS_StartOS+0x60>)
 8000d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f380 8809 	msr	PSP, r0

	Switch_MSP_to_PSP();  /* Switch to PSP */
 8000d58:	f3ef 8014 	mrs	r0, CONTROL
 8000d5c:	f04f 0102 	mov.w	r1, #2
 8000d60:	ea40 0001 	orr.w	r0, r0, r1
 8000d64:	f380 8814 	msr	CONTROL, r0

	Switch_Privileged_to_unPrivileged();  /* Switch to unprivileged */
 8000d68:	f3ef 8314 	mrs	r3, CONTROL
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	f383 8814 	msr	CONTROL, r3

	OS_Control.CurrentTask->P_TaskEntry();
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <MyRTOS_StartOS+0x60>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	4798      	blx	r3

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000c4 	.word	0x200000c4
 8000d88:	20000080 	.word	0x20000080

08000d8c <MyRTOS_CreateTask>:


MY_RTOS_ErrorID MyRTOS_CreateTask (Task_REF* Tref)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	MY_RTOS_ErrorID Error = NoError;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]

	//Create PSP Stack for task
    Tref->_S_PSP_Task = OS_Control.Task_Locator;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MyRTOS_CreateTask+0x78>)
 8000d9a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	611a      	str	r2, [r3, #16]
    Tref->_E_PSP_Task = Tref->_S_PSP_Task - (Tref->Stack_Size / 4); /* _E_MSP_Task is uint32_t Pointer  */
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691a      	ldr	r2, [r3, #16]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f023 0303 	bic.w	r3, r3, #3
 8000dae:	425b      	negs	r3, r3
 8000db0:	441a      	add	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	615a      	str	r2, [r3, #20]

	//Check task stack size exceeded the HeapStack
    if (Tref->_E_PSP_Task < ( (uint32_t*)(&_E_Heap) ) )
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <MyRTOS_CreateTask+0x7c>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d201      	bcs.n	8000dc4 <MyRTOS_CreateTask+0x38>
    {
    	return task_Exceeded_StackSize;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	e01b      	b.n	8000dfc <MyRTOS_CreateTask+0x70>
    }

    //Create TaskStack
    MyRTOS_CreateTaskStack(Tref);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff fee1 	bl	8000b8c <MyRTOS_CreateTaskStack>

	//Aligned 8 Byte to Task_Locator
	OS_Control.Task_Locator = ( Tref->_E_PSP_Task - 2 );
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	3b08      	subs	r3, #8
 8000dd0:	4a0c      	ldr	r2, [pc, #48]	; (8000e04 <MyRTOS_CreateTask+0x78>)
 8000dd2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80


	//Passing Task to OS
	OS_Control.OS_Tasks[OS_Control.NoOFActiveTasks] = Tref;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MyRTOS_CreateTask+0x78>)
 8000dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ddc:	4909      	ldr	r1, [pc, #36]	; (8000e04 <MyRTOS_CreateTask+0x78>)
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoOFActiveTasks++;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MyRTOS_CreateTask+0x78>)
 8000de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <MyRTOS_CreateTask+0x78>)
 8000dee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	//Task State update--> Suspend
    Tref->TaskState = Suspend;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return Error;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200000c4 	.word	0x200000c4
 8000e08:	20000310 	.word	0x20000310

08000e0c <MyRTOS_TaskWaitingTime>:

void MyRTOS_TaskWaitingTime (uint32_t NoTicks, Task_REF* Tref)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
	Tref->TimeWaiting.Blocking = BlockingEnable;  //Enable blocking
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	Tref->TimeWaiting.Ticks_Count = NoTicks;  //Pass The Ticks numbers
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	63da      	str	r2, [r3, #60]	; 0x3c

	Tref->TaskState = Suspend;  //update Task state
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	OS_SVC_Set(SVC_TerminateTask);  //Terminate task
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f7ff fe4b 	bl	8000ac8 <OS_SVC_Set>

}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <MyRTOS_ActivateTask>:

void MyRTOS_ActivateTask (Task_REF* Tref)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
	//Update TaskState
	if (Tref->TaskState == Suspend)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d106      	bne.n	8000e5a <MyRTOS_ActivateTask+0x20>
	{
		Tref->TaskState = Waiting;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2202      	movs	r2, #2
 8000e50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

		OS_SVC_Set(SVC_ActivateTask);   /* Generate Exception to Active throughout SCV */
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff fe37 	bl	8000ac8 <OS_SVC_Set>
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <MyRTOS_AcquireMutex>:

	OS_SVC_Set(SVC_TerminateTask);  /* Generate Exception to Terminate throughout SVC */
}

MY_RTOS_ErrorID MyRTOS_AcquireMutex (Task_REF* Tref, Mutex_ref* Mref)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
	if (Mref->CurrentUser == NULL)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d103      	bne.n	8000e7c <MyRTOS_AcquireMutex+0x1a>
	{
		Mref->CurrentUser = Tref;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	e010      	b.n	8000e9e <MyRTOS_AcquireMutex+0x3c>

	} else if (Mref->NextUser == NULL)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10a      	bne.n	8000e9a <MyRTOS_AcquireMutex+0x38>
	{
		Mref->NextUser = Tref;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	60da      	str	r2, [r3, #12]

		Tref->TaskState = Suspend;  /* Make task state suspend until release mutex */
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

		OS_SVC_Set(SVC_TerminateTask); /* Terminate task */
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff fe18 	bl	8000ac8 <OS_SVC_Set>
 8000e98:	e001      	b.n	8000e9e <MyRTOS_AcquireMutex+0x3c>

	} else
	{
		return MutexIsReachedToMaxNumberOfUsers;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e000      	b.n	8000ea0 <MyRTOS_AcquireMutex+0x3e>
	}

	return NoError;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <Task1_IMPLT>:
uint32_t Count, TaskCounter;
//=====================================================================================================

//------------------------------------------<Init Task Function>
void Task1_IMPLT ()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	while (1)
	{
		Task1_LED ^= 1;
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <Task1_IMPLT+0x48>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f083 0301 	eor.w	r3, r3, #1
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <Task1_IMPLT+0x48>)
 8000eb6:	6013      	str	r3, [r2, #0]

		if (Count == 1000)
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <Task1_IMPLT+0x4c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ec0:	d10a      	bne.n	8000ed8 <Task1_IMPLT+0x30>
		{
			Count = 0;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <Task1_IMPLT+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
			MyRTOS_AcquireMutex(&Task1, &Mutex1);
 8000ec8:	490b      	ldr	r1, [pc, #44]	; (8000ef8 <Task1_IMPLT+0x50>)
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <Task1_IMPLT+0x54>)
 8000ecc:	f7ff ffc9 	bl	8000e62 <MyRTOS_AcquireMutex>
			MyRTOS_ActivateTask(&Task2);
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <Task1_IMPLT+0x58>)
 8000ed2:	f7ff ffb2 	bl	8000e3a <MyRTOS_ActivateTask>
 8000ed6:	e7e9      	b.n	8000eac <Task1_IMPLT+0x4>

		} else if (Count == 3000)
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <Task1_IMPLT+0x4c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d1e3      	bne.n	8000eac <Task1_IMPLT+0x4>
		{
			MyRTOS_AcquireMutex(&Task1, &Mutex2);
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <Task1_IMPLT+0x5c>)
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <Task1_IMPLT+0x54>)
 8000ee8:	f7ff ffbb 	bl	8000e62 <MyRTOS_AcquireMutex>
		Task1_LED ^= 1;
 8000eec:	e7de      	b.n	8000eac <Task1_IMPLT+0x4>
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	2000024c 	.word	0x2000024c
 8000ef8:	20000194 	.word	0x20000194
 8000efc:	20000208 	.word	0x20000208
 8000f00:	200002c8 	.word	0x200002c8
 8000f04:	20000294 	.word	0x20000294

08000f08 <Task2_IMPLT>:
		}
	}
}

void Task2_IMPLT ()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	while (1)
	{
		Task2_LED ^= 1;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <Task2_IMPLT+0x2c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f083 0301 	eor.w	r3, r3, #1
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <Task2_IMPLT+0x2c>)
 8000f16:	6013      	str	r3, [r2, #0]

		if (Count == 2000)
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <Task2_IMPLT+0x30>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f20:	d1f4      	bne.n	8000f0c <Task2_IMPLT+0x4>
		{
			MyRTOS_AcquireMutex(&Task2, &Mutex2);
 8000f22:	4906      	ldr	r1, [pc, #24]	; (8000f3c <Task2_IMPLT+0x34>)
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <Task2_IMPLT+0x38>)
 8000f26:	f7ff ff9c 	bl	8000e62 <MyRTOS_AcquireMutex>

			MyRTOS_AcquireMutex(&Task2, &Mutex1);
 8000f2a:	4906      	ldr	r1, [pc, #24]	; (8000f44 <Task2_IMPLT+0x3c>)
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <Task2_IMPLT+0x38>)
 8000f2e:	f7ff ff98 	bl	8000e62 <MyRTOS_AcquireMutex>
		Task2_LED ^= 1;
 8000f32:	e7eb      	b.n	8000f0c <Task2_IMPLT+0x4>
 8000f34:	2000000c 	.word	0x2000000c
 8000f38:	2000024c 	.word	0x2000024c
 8000f3c:	20000294 	.word	0x20000294
 8000f40:	200002c8 	.word	0x200002c8
 8000f44:	20000194 	.word	0x20000194

08000f48 <Task3_IMPLT>:
		}
	}
}

void Task3_IMPLT ()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	while (1)
	{
		Task3_LED ^= 1;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <Task3_IMPLT+0x28>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f083 0301 	eor.w	r3, r3, #1
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <Task3_IMPLT+0x28>)
 8000f56:	6013      	str	r3, [r2, #0]

		if (Count == 3)
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <Task3_IMPLT+0x2c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d1f5      	bne.n	8000f4c <Task3_IMPLT+0x4>
		{
			Count = 0;
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <Task3_IMPLT+0x2c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
			MyRTOS_TaskWaitingTime(9, &Task3);
 8000f66:	4904      	ldr	r1, [pc, #16]	; (8000f78 <Task3_IMPLT+0x30>)
 8000f68:	2009      	movs	r0, #9
 8000f6a:	f7ff ff4f 	bl	8000e0c <MyRTOS_TaskWaitingTime>
		Task3_LED ^= 1;
 8000f6e:	e7ed      	b.n	8000f4c <Task3_IMPLT+0x4>
 8000f70:	20000010 	.word	0x20000010
 8000f74:	2000024c 	.word	0x2000024c
 8000f78:	20000250 	.word	0x20000250

08000f7c <Task4_IMPLT>:
		}
	}
}

void Task4_IMPLT ()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	while (1)
	{
		Task4_LED ^= 1;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <Task4_IMPLT+0x30>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f083 0301 	eor.w	r3, r3, #1
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <Task4_IMPLT+0x30>)
 8000f8a:	6013      	str	r3, [r2, #0]

		if (Count == 3)
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <Task4_IMPLT+0x34>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d1f5      	bne.n	8000f80 <Task4_IMPLT+0x4>
		{
			Count = 0;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <Task4_IMPLT+0x34>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
			TaskCounter = 1;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <Task4_IMPLT+0x38>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
			MyRTOS_TaskWaitingTime(15, &Task4);
 8000fa0:	4905      	ldr	r1, [pc, #20]	; (8000fb8 <Task4_IMPLT+0x3c>)
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f7ff ff32 	bl	8000e0c <MyRTOS_TaskWaitingTime>
		Task4_LED ^= 1;
 8000fa8:	e7ea      	b.n	8000f80 <Task4_IMPLT+0x4>
 8000faa:	bf00      	nop
 8000fac:	20000014 	.word	0x20000014
 8000fb0:	2000024c 	.word	0x2000024c
 8000fb4:	200002c4 	.word	0x200002c4
 8000fb8:	200001c4 	.word	0x200001c4

08000fbc <main>:
	}
}


int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	MY_RTOS_ErrorID Error = NoError;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	71fb      	strb	r3, [r7, #7]

	HW_Init(); /* To init Hardware */
 8000fc6:	f7ff fabd 	bl	8000544 <HW_Init>

	while ( MY_RTOS_Init() ); /* To check MyRTOS are initialized correctly */
 8000fca:	bf00      	nop
 8000fcc:	f7ff fe70 	bl	8000cb0 <MY_RTOS_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1fa      	bne.n	8000fcc <main+0x10>

	//----------------------<Init Mutex1>
	Mutex1.PayloadSize = 3;
 8000fd6:	4b45      	ldr	r3, [pc, #276]	; (80010ec <main+0x130>)
 8000fd8:	2203      	movs	r2, #3
 8000fda:	605a      	str	r2, [r3, #4]
	Mutex1.Ppayload = Payload;
 8000fdc:	4b43      	ldr	r3, [pc, #268]	; (80010ec <main+0x130>)
 8000fde:	4a44      	ldr	r2, [pc, #272]	; (80010f0 <main+0x134>)
 8000fe0:	601a      	str	r2, [r3, #0]
	strcpy(Mutex1.MutexName, "Mutex1");
 8000fe2:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <main+0x138>)
 8000fe4:	4a44      	ldr	r2, [pc, #272]	; (80010f8 <main+0x13c>)
 8000fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fea:	6018      	str	r0, [r3, #0]
 8000fec:	3304      	adds	r3, #4
 8000fee:	8019      	strh	r1, [r3, #0]
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	0c0a      	lsrs	r2, r1, #16
 8000ff4:	701a      	strb	r2, [r3, #0]
	//=====================================================================

	//----------------------<Init Mutex2>
	Mutex2.PayloadSize = 3;
 8000ff6:	4b41      	ldr	r3, [pc, #260]	; (80010fc <main+0x140>)
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	605a      	str	r2, [r3, #4]
	Mutex2.Ppayload = Payload;
 8000ffc:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <main+0x140>)
 8000ffe:	4a3c      	ldr	r2, [pc, #240]	; (80010f0 <main+0x134>)
 8001000:	601a      	str	r2, [r3, #0]
	strcpy(Mutex2.MutexName, "Mutex2");
 8001002:	4b3f      	ldr	r3, [pc, #252]	; (8001100 <main+0x144>)
 8001004:	4a3f      	ldr	r2, [pc, #252]	; (8001104 <main+0x148>)
 8001006:	e892 0003 	ldmia.w	r2, {r0, r1}
 800100a:	6018      	str	r0, [r3, #0]
 800100c:	3304      	adds	r3, #4
 800100e:	8019      	strh	r1, [r3, #0]
 8001010:	3302      	adds	r3, #2
 8001012:	0c0a      	lsrs	r2, r1, #16
 8001014:	701a      	strb	r2, [r3, #0]
	//=====================================================================

	//----------------------<Init Task1>
	Task1.Stack_Size = 1024;
 8001016:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <main+0x14c>)
 8001018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101c:	601a      	str	r2, [r3, #0]
	Task1.Priority = 4;
 800101e:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <main+0x14c>)
 8001020:	2204      	movs	r2, #4
 8001022:	711a      	strb	r2, [r3, #4]
	Task1.P_TaskEntry = Task1_IMPLT;
 8001024:	4b38      	ldr	r3, [pc, #224]	; (8001108 <main+0x14c>)
 8001026:	4a39      	ldr	r2, [pc, #228]	; (800110c <main+0x150>)
 8001028:	609a      	str	r2, [r3, #8]
	strcpy(Task1.TaskName, "Task1");
 800102a:	4b39      	ldr	r3, [pc, #228]	; (8001110 <main+0x154>)
 800102c:	4a39      	ldr	r2, [pc, #228]	; (8001114 <main+0x158>)
 800102e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001032:	6018      	str	r0, [r3, #0]
 8001034:	3304      	adds	r3, #4
 8001036:	8019      	strh	r1, [r3, #0]
	//=====================================================================

	//----------------------<Init Task2>
	Task2.Stack_Size = 1024;
 8001038:	4b37      	ldr	r3, [pc, #220]	; (8001118 <main+0x15c>)
 800103a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800103e:	601a      	str	r2, [r3, #0]
	Task2.Priority = 3;
 8001040:	4b35      	ldr	r3, [pc, #212]	; (8001118 <main+0x15c>)
 8001042:	2203      	movs	r2, #3
 8001044:	711a      	strb	r2, [r3, #4]
	Task2.P_TaskEntry = Task2_IMPLT;
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <main+0x15c>)
 8001048:	4a34      	ldr	r2, [pc, #208]	; (800111c <main+0x160>)
 800104a:	609a      	str	r2, [r3, #8]
	strcpy(Task2.TaskName, "Task2");
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <main+0x164>)
 800104e:	4a35      	ldr	r2, [pc, #212]	; (8001124 <main+0x168>)
 8001050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001054:	6018      	str	r0, [r3, #0]
 8001056:	3304      	adds	r3, #4
 8001058:	8019      	strh	r1, [r3, #0]
	//=====================================================================

	//----------------------<Init Task3>
	Task3.Stack_Size = 1024;
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <main+0x16c>)
 800105c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001060:	601a      	str	r2, [r3, #0]
	Task3.Priority = 2;
 8001062:	4b31      	ldr	r3, [pc, #196]	; (8001128 <main+0x16c>)
 8001064:	2202      	movs	r2, #2
 8001066:	711a      	strb	r2, [r3, #4]
	Task3.P_TaskEntry = Task3_IMPLT;
 8001068:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <main+0x16c>)
 800106a:	4a30      	ldr	r2, [pc, #192]	; (800112c <main+0x170>)
 800106c:	609a      	str	r2, [r3, #8]
	strcpy(Task3.TaskName, "Task3");
 800106e:	4b30      	ldr	r3, [pc, #192]	; (8001130 <main+0x174>)
 8001070:	4a30      	ldr	r2, [pc, #192]	; (8001134 <main+0x178>)
 8001072:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001076:	6018      	str	r0, [r3, #0]
 8001078:	3304      	adds	r3, #4
 800107a:	8019      	strh	r1, [r3, #0]
	//=====================================================================

	//----------------------<Init Task4>
	Task4.Stack_Size = 1024;
 800107c:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <main+0x17c>)
 800107e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001082:	601a      	str	r2, [r3, #0]
	Task4.Priority = 1;
 8001084:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <main+0x17c>)
 8001086:	2201      	movs	r2, #1
 8001088:	711a      	strb	r2, [r3, #4]
	Task4.P_TaskEntry = Task4_IMPLT;
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <main+0x17c>)
 800108c:	4a2b      	ldr	r2, [pc, #172]	; (800113c <main+0x180>)
 800108e:	609a      	str	r2, [r3, #8]
	strcpy(Task4.TaskName, "Task4");
 8001090:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <main+0x184>)
 8001092:	4a2c      	ldr	r2, [pc, #176]	; (8001144 <main+0x188>)
 8001094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001098:	6018      	str	r0, [r3, #0]
 800109a:	3304      	adds	r3, #4
 800109c:	8019      	strh	r1, [r3, #0]
	//=====================================================================

	Error += MyRTOS_CreateTask(&Task1);
 800109e:	481a      	ldr	r0, [pc, #104]	; (8001108 <main+0x14c>)
 80010a0:	f7ff fe74 	bl	8000d8c <MyRTOS_CreateTask>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4413      	add	r3, r2
 80010ac:	71fb      	strb	r3, [r7, #7]
	Error += MyRTOS_CreateTask(&Task2);
 80010ae:	481a      	ldr	r0, [pc, #104]	; (8001118 <main+0x15c>)
 80010b0:	f7ff fe6c 	bl	8000d8c <MyRTOS_CreateTask>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4413      	add	r3, r2
 80010bc:	71fb      	strb	r3, [r7, #7]
	Error += MyRTOS_CreateTask(&Task3);
 80010be:	481a      	ldr	r0, [pc, #104]	; (8001128 <main+0x16c>)
 80010c0:	f7ff fe64 	bl	8000d8c <MyRTOS_CreateTask>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4413      	add	r3, r2
 80010cc:	71fb      	strb	r3, [r7, #7]
	Error += MyRTOS_CreateTask(&Task4);
 80010ce:	481a      	ldr	r0, [pc, #104]	; (8001138 <main+0x17c>)
 80010d0:	f7ff fe5c 	bl	8000d8c <MyRTOS_CreateTask>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4413      	add	r3, r2
 80010dc:	71fb      	strb	r3, [r7, #7]

	MyRTOS_ActivateTask(&Task1);
 80010de:	480a      	ldr	r0, [pc, #40]	; (8001108 <main+0x14c>)
 80010e0:	f7ff feab 	bl	8000e3a <MyRTOS_ActivateTask>

	//Start OS
	MyRTOS_StartOS();
 80010e4:	f7ff fe1e 	bl	8000d24 <MyRTOS_StartOS>

	//Infinite loop
	while (1)
 80010e8:	e7fe      	b.n	80010e8 <main+0x12c>
 80010ea:	bf00      	nop
 80010ec:	20000194 	.word	0x20000194
 80010f0:	20000004 	.word	0x20000004
 80010f4:	200001a4 	.word	0x200001a4
 80010f8:	08001208 	.word	0x08001208
 80010fc:	20000294 	.word	0x20000294
 8001100:	200002a4 	.word	0x200002a4
 8001104:	08001210 	.word	0x08001210
 8001108:	20000208 	.word	0x20000208
 800110c:	08000ea9 	.word	0x08000ea9
 8001110:	20000224 	.word	0x20000224
 8001114:	08001218 	.word	0x08001218
 8001118:	200002c8 	.word	0x200002c8
 800111c:	08000f09 	.word	0x08000f09
 8001120:	200002e4 	.word	0x200002e4
 8001124:	08001220 	.word	0x08001220
 8001128:	20000250 	.word	0x20000250
 800112c:	08000f49 	.word	0x08000f49
 8001130:	2000026c 	.word	0x2000026c
 8001134:	08001228 	.word	0x08001228
 8001138:	200001c4 	.word	0x200001c4
 800113c:	08000f7d 	.word	0x08000f7d
 8001140:	200001e0 	.word	0x200001e0
 8001144:	08001230 	.word	0x08001230

08001148 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800114a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800114c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <LoopForever+0x6>)
  ldr r1, =_edata
 8001152:	490d      	ldr	r1, [pc, #52]	; (8001188 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <LoopForever+0xe>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001168:	4c0a      	ldr	r4, [pc, #40]	; (8001194 <LoopForever+0x16>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001176:	f000 f811 	bl	800119c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117a:	f7ff ff1f 	bl	8000fbc <main>

0800117e <LoopForever>:

LoopForever:
    b LoopForever
 800117e:	e7fe      	b.n	800117e <LoopForever>
  ldr   r0, =_estack
 8001180:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800118c:	08001240 	.word	0x08001240
  ldr r2, =_sbss
 8001190:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001194:	2000030c 	.word	0x2000030c

08001198 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_2_IRQHandler>
	...

0800119c <__libc_init_array>:
 800119c:	b570      	push	{r4, r5, r6, lr}
 800119e:	2500      	movs	r5, #0
 80011a0:	4e0c      	ldr	r6, [pc, #48]	; (80011d4 <__libc_init_array+0x38>)
 80011a2:	4c0d      	ldr	r4, [pc, #52]	; (80011d8 <__libc_init_array+0x3c>)
 80011a4:	1ba4      	subs	r4, r4, r6
 80011a6:	10a4      	asrs	r4, r4, #2
 80011a8:	42a5      	cmp	r5, r4
 80011aa:	d109      	bne.n	80011c0 <__libc_init_array+0x24>
 80011ac:	f000 f81a 	bl	80011e4 <_init>
 80011b0:	2500      	movs	r5, #0
 80011b2:	4e0a      	ldr	r6, [pc, #40]	; (80011dc <__libc_init_array+0x40>)
 80011b4:	4c0a      	ldr	r4, [pc, #40]	; (80011e0 <__libc_init_array+0x44>)
 80011b6:	1ba4      	subs	r4, r4, r6
 80011b8:	10a4      	asrs	r4, r4, #2
 80011ba:	42a5      	cmp	r5, r4
 80011bc:	d105      	bne.n	80011ca <__libc_init_array+0x2e>
 80011be:	bd70      	pop	{r4, r5, r6, pc}
 80011c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011c4:	4798      	blx	r3
 80011c6:	3501      	adds	r5, #1
 80011c8:	e7ee      	b.n	80011a8 <__libc_init_array+0xc>
 80011ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011ce:	4798      	blx	r3
 80011d0:	3501      	adds	r5, #1
 80011d2:	e7f2      	b.n	80011ba <__libc_init_array+0x1e>
 80011d4:	08001238 	.word	0x08001238
 80011d8:	08001238 	.word	0x08001238
 80011dc:	08001238 	.word	0x08001238
 80011e0:	0800123c 	.word	0x0800123c

080011e4 <_init>:
 80011e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e6:	bf00      	nop
 80011e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ea:	bc08      	pop	{r3}
 80011ec:	469e      	mov	lr, r3
 80011ee:	4770      	bx	lr

080011f0 <_fini>:
 80011f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f2:	bf00      	nop
 80011f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011f6:	bc08      	pop	{r3}
 80011f8:	469e      	mov	lr, r3
 80011fa:	4770      	bx	lr
